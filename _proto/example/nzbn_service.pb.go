// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nzbn_service.proto

/*
Package xperior_pkg is a generated protocol buffer package.

It is generated from these files:
	nzbn_service.proto

It has these top-level messages:
	NZBNRequest
	RegisteredAddress
	CompanyDetails
	NZBNResponse
	GetHistoryRequest
	GetHistoryResponse
	DeleteHistoryRequest
*/
package xperior_pkg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NZBNRequest struct {
	Nzbnnumber string `protobuf:"bytes,1,opt,name=nzbnnumber" json:"nzbnnumber,omitempty"`
}

func (m *NZBNRequest) Reset()                    { *m = NZBNRequest{} }
func (m *NZBNRequest) String() string            { return proto.CompactTextString(m) }
func (*NZBNRequest) ProtoMessage()               {}
func (*NZBNRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NZBNRequest) GetNzbnnumber() string {
	if m != nil {
		return m.Nzbnnumber
	}
	return ""
}

type RegisteredAddress struct {
	Address1    string `protobuf:"bytes,1,opt,name=address1" json:"address1,omitempty"`
	Address2    string `protobuf:"bytes,2,opt,name=address2" json:"address2,omitempty"`
	Address3    string `protobuf:"bytes,3,opt,name=address3" json:"address3,omitempty"`
	Countrycode string `protobuf:"bytes,4,opt,name=countrycode" json:"countrycode,omitempty"`
}

func (m *RegisteredAddress) Reset()                    { *m = RegisteredAddress{} }
func (m *RegisteredAddress) String() string            { return proto.CompactTextString(m) }
func (*RegisteredAddress) ProtoMessage()               {}
func (*RegisteredAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisteredAddress) GetAddress1() string {
	if m != nil {
		return m.Address1
	}
	return ""
}

func (m *RegisteredAddress) GetAddress2() string {
	if m != nil {
		return m.Address2
	}
	return ""
}

func (m *RegisteredAddress) GetAddress3() string {
	if m != nil {
		return m.Address3
	}
	return ""
}

func (m *RegisteredAddress) GetCountrycode() string {
	if m != nil {
		return m.Countrycode
	}
	return ""
}

type CompanyDetails struct {
	Entityname              string             `protobuf:"bytes,1,opt,name=entityname" json:"entityname,omitempty"`
	Entitytypedescription   string             `protobuf:"bytes,2,opt,name=entitytypedescription" json:"entitytypedescription,omitempty"`
	Entitystatusdescription string             `protobuf:"bytes,3,opt,name=entitystatusdescription" json:"entitystatusdescription,omitempty"`
	Registrationdate        string             `protobuf:"bytes,4,opt,name=registrationdate" json:"registrationdate,omitempty"`
	Address                 *RegisteredAddress `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
}

func (m *CompanyDetails) Reset()                    { *m = CompanyDetails{} }
func (m *CompanyDetails) String() string            { return proto.CompactTextString(m) }
func (*CompanyDetails) ProtoMessage()               {}
func (*CompanyDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CompanyDetails) GetEntityname() string {
	if m != nil {
		return m.Entityname
	}
	return ""
}

func (m *CompanyDetails) GetEntitytypedescription() string {
	if m != nil {
		return m.Entitytypedescription
	}
	return ""
}

func (m *CompanyDetails) GetEntitystatusdescription() string {
	if m != nil {
		return m.Entitystatusdescription
	}
	return ""
}

func (m *CompanyDetails) GetRegistrationdate() string {
	if m != nil {
		return m.Registrationdate
	}
	return ""
}

func (m *CompanyDetails) GetAddress() *RegisteredAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

type NZBNResponse struct {
	Id           int64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Nzbnnumber   string          `protobuf:"bytes,2,opt,name=nzbnnumber" json:"nzbnnumber,omitempty"`
	Nzbnresponse *CompanyDetails `protobuf:"bytes,3,opt,name=nzbnresponse" json:"nzbnresponse,omitempty"`
}

func (m *NZBNResponse) Reset()                    { *m = NZBNResponse{} }
func (m *NZBNResponse) String() string            { return proto.CompactTextString(m) }
func (*NZBNResponse) ProtoMessage()               {}
func (*NZBNResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NZBNResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NZBNResponse) GetNzbnnumber() string {
	if m != nil {
		return m.Nzbnnumber
	}
	return ""
}

func (m *NZBNResponse) GetNzbnresponse() *CompanyDetails {
	if m != nil {
		return m.Nzbnresponse
	}
	return nil
}

type GetHistoryRequest struct {
}

func (m *GetHistoryRequest) Reset()                    { *m = GetHistoryRequest{} }
func (m *GetHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHistoryRequest) ProtoMessage()               {}
func (*GetHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type GetHistoryResponse struct {
	Response []*NZBNResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *GetHistoryResponse) Reset()                    { *m = GetHistoryResponse{} }
func (m *GetHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHistoryResponse) ProtoMessage()               {}
func (*GetHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetHistoryResponse) GetResponse() []*NZBNResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type DeleteHistoryRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteHistoryRequest) Reset()                    { *m = DeleteHistoryRequest{} }
func (m *DeleteHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteHistoryRequest) ProtoMessage()               {}
func (*DeleteHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteHistoryRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*NZBNRequest)(nil), "xperior_pkg.NZBNRequest")
	proto.RegisterType((*RegisteredAddress)(nil), "xperior_pkg.RegisteredAddress")
	proto.RegisterType((*CompanyDetails)(nil), "xperior_pkg.CompanyDetails")
	proto.RegisterType((*NZBNResponse)(nil), "xperior_pkg.NZBNResponse")
	proto.RegisterType((*GetHistoryRequest)(nil), "xperior_pkg.GetHistoryRequest")
	proto.RegisterType((*GetHistoryResponse)(nil), "xperior_pkg.GetHistoryResponse")
	proto.RegisterType((*DeleteHistoryRequest)(nil), "xperior_pkg.DeleteHistoryRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NzbnService service

type NzbnServiceClient interface {
	RequestNZBNCheck(ctx context.Context, in *NZBNRequest, opts ...grpc.CallOption) (*NZBNResponse, error)
	GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error)
	DeleteHistory(ctx context.Context, in *DeleteHistoryRequest, opts ...grpc.CallOption) (*NZBNResponse, error)
}

type nzbnServiceClient struct {
	cc *grpc.ClientConn
}

func NewNzbnServiceClient(cc *grpc.ClientConn) NzbnServiceClient {
	return &nzbnServiceClient{cc}
}

func (c *nzbnServiceClient) RequestNZBNCheck(ctx context.Context, in *NZBNRequest, opts ...grpc.CallOption) (*NZBNResponse, error) {
	out := new(NZBNResponse)
	err := grpc.Invoke(ctx, "/xperior_pkg.NzbnService/requestNZBNCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nzbnServiceClient) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error) {
	out := new(GetHistoryResponse)
	err := grpc.Invoke(ctx, "/xperior_pkg.NzbnService/getHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nzbnServiceClient) DeleteHistory(ctx context.Context, in *DeleteHistoryRequest, opts ...grpc.CallOption) (*NZBNResponse, error) {
	out := new(NZBNResponse)
	err := grpc.Invoke(ctx, "/xperior_pkg.NzbnService/deleteHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NzbnService service

type NzbnServiceServer interface {
	RequestNZBNCheck(context.Context, *NZBNRequest) (*NZBNResponse, error)
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error)
	DeleteHistory(context.Context, *DeleteHistoryRequest) (*NZBNResponse, error)
}

func RegisterNzbnServiceServer(s *grpc.Server, srv NzbnServiceServer) {
	s.RegisterService(&_NzbnService_serviceDesc, srv)
}

func _NzbnService_RequestNZBNCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NZBNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NzbnServiceServer).RequestNZBNCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xperior_pkg.NzbnService/RequestNZBNCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NzbnServiceServer).RequestNZBNCheck(ctx, req.(*NZBNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NzbnService_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NzbnServiceServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xperior_pkg.NzbnService/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NzbnServiceServer).GetHistory(ctx, req.(*GetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NzbnService_DeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NzbnServiceServer).DeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xperior_pkg.NzbnService/DeleteHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NzbnServiceServer).DeleteHistory(ctx, req.(*DeleteHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NzbnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xperior_pkg.NzbnService",
	HandlerType: (*NzbnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "requestNZBNCheck",
			Handler:    _NzbnService_RequestNZBNCheck_Handler,
		},
		{
			MethodName: "getHistory",
			Handler:    _NzbnService_GetHistory_Handler,
		},
		{
			MethodName: "deleteHistory",
			Handler:    _NzbnService_DeleteHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nzbn_service.proto",
}

func init() { proto.RegisterFile("nzbn_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x8b, 0xd4, 0x40,
	0x10, 0x35, 0x19, 0x3f, 0xd6, 0xca, 0xba, 0xb8, 0xa5, 0x62, 0x1c, 0x61, 0x1d, 0xfb, 0x20, 0x83,
	0xe0, 0x80, 0x19, 0x85, 0xbd, 0x89, 0xee, 0x82, 0x8a, 0x30, 0x42, 0xbc, 0x79, 0x59, 0x32, 0xe9,
	0x62, 0x6c, 0x76, 0xa7, 0x3b, 0x76, 0x77, 0xc4, 0xec, 0xc5, 0x9b, 0xe0, 0x5f, 0xf6, 0x24, 0xf9,
	0x98, 0xd8, 0x3d, 0x1f, 0x7b, 0x4b, 0xd5, 0xab, 0xd7, 0xf5, 0x5e, 0xbf, 0x0e, 0xa0, 0xbc, 0x9c,
	0xcb, 0x33, 0x43, 0xfa, 0x87, 0xc8, 0x69, 0x52, 0x68, 0x65, 0x15, 0x46, 0x3f, 0x0b, 0xd2, 0x42,
	0xe9, 0xb3, 0xe2, 0x7c, 0xc1, 0x5e, 0x40, 0x34, 0xfb, 0xfa, 0x6e, 0x96, 0xd2, 0xf7, 0x92, 0x8c,
	0xc5, 0x23, 0x80, 0x9a, 0x21, 0xcb, 0xe5, 0x9c, 0x74, 0x1c, 0x8c, 0x82, 0xf1, 0xed, 0xd4, 0xe9,
	0xb0, 0x3f, 0x01, 0x1c, 0xa6, 0xb4, 0x10, 0xc6, 0x92, 0x26, 0xfe, 0x96, 0x73, 0x4d, 0xc6, 0xe0,
	0x10, 0xf6, 0xb2, 0xf6, 0xf3, 0x65, 0xc7, 0xe9, 0x6b, 0x07, 0x4b, 0xe2, 0xd0, 0xc3, 0x12, 0x07,
	0x9b, 0xc6, 0x03, 0x0f, 0x9b, 0xe2, 0x08, 0xa2, 0x5c, 0x95, 0xd2, 0xea, 0x2a, 0x57, 0x9c, 0xe2,
	0xeb, 0x0d, 0xec, 0xb6, 0xd8, 0xef, 0x10, 0x0e, 0x4e, 0xd4, 0xb2, 0xc8, 0x64, 0x75, 0x4a, 0x36,
	0x13, 0x17, 0xa6, 0x96, 0x4f, 0xd2, 0x0a, 0x5b, 0xc9, 0x6c, 0x49, 0x2b, 0xf9, 0xff, 0x3b, 0xf8,
	0x0a, 0x1e, 0xb4, 0x95, 0xad, 0x0a, 0xe2, 0x64, 0x72, 0x2d, 0x0a, 0x2b, 0x94, 0xec, 0x94, 0x6d,
	0x07, 0xf1, 0x18, 0x1e, 0xb6, 0x80, 0xb1, 0x99, 0x2d, 0x8d, 0xcb, 0x6b, 0x55, 0xef, 0x82, 0xf1,
	0x39, 0xdc, 0xd5, 0xcd, 0x6d, 0xe9, 0xac, 0xae, 0x79, 0x66, 0x57, 0x4e, 0x36, 0xfa, 0x78, 0x0c,
	0xb7, 0x3a, 0xf3, 0xf1, 0x8d, 0x51, 0x30, 0x8e, 0x92, 0xa3, 0x89, 0x13, 0xd4, 0x64, 0xe3, 0xd6,
	0xd3, 0xd5, 0x38, 0xfb, 0x05, 0xfb, 0x6d, 0x86, 0xa6, 0x50, 0xd2, 0x10, 0x1e, 0x40, 0x28, 0x78,
	0xe3, 0x7e, 0x90, 0x86, 0x82, 0xaf, 0x85, 0x1a, 0xae, 0x87, 0x8a, 0x6f, 0x60, 0xbf, 0xae, 0x74,
	0xc7, 0x6f, 0x4c, 0x45, 0xc9, 0x63, 0x6f, 0xbd, 0x7f, 0xd1, 0xa9, 0x47, 0x60, 0xf7, 0xe0, 0xf0,
	0x3d, 0xd9, 0x0f, 0xc2, 0x58, 0xa5, 0xab, 0xee, 0x29, 0xb1, 0x4f, 0x80, 0x6e, 0xb3, 0xd3, 0xf6,
	0x1a, 0xf6, 0xfa, 0x3d, 0xc1, 0x68, 0x30, 0x8e, 0x92, 0x47, 0xde, 0x1e, 0xd7, 0x48, 0xda, 0x8f,
	0xb2, 0x67, 0x70, 0xff, 0x94, 0x2e, 0xc8, 0x92, 0xbf, 0x64, 0xdd, 0x6a, 0xf2, 0x37, 0x80, 0x68,
	0x76, 0x39, 0x97, 0x5f, 0xda, 0x17, 0x8f, 0x1f, 0xeb, 0x00, 0x9a, 0xd1, 0xfa, 0xe0, 0x93, 0x6f,
	0x94, 0x9f, 0x63, 0xbc, 0x65, 0x61, 0x33, 0x32, 0xdc, 0x2d, 0x85, 0x5d, 0xc3, 0xcf, 0x00, 0x8b,
	0xde, 0x0f, 0xfa, 0xe1, 0x6c, 0xb8, 0x1f, 0x3e, 0xd9, 0x89, 0x3b, 0x07, 0xde, 0xe1, 0xae, 0x27,
	0x7c, 0xea, 0x71, 0xb6, 0xf9, 0xbd, 0x52, 0xe1, 0xfc, 0x66, 0xf3, 0x7f, 0x4f, 0xff, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x66, 0x01, 0x8c, 0x7d, 0xf5, 0x03, 0x00, 0x00,
}
